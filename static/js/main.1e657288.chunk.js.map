{"version":3,"sources":["api/useGetSunriseAndSunset.tsx","api/useFetchApi.tsx","getLocation.tsx","Playpiem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SunriseApiStatus","useFetchApi","useCallback","endpoint","a","config","method","window","fetch","response","ok","json","text","errorMessage","Promise","reject","Error","useGetSunriseAndSunset","lat","lng","fetchApi","locationAvailable","useQuery","enabled","LONDON_LAT","LONDON_LNG","LONDON_POSITION","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Playpiem","useState","isLocating","setIsLocating","setLng","setLat","data","locationFound","isSuccess","localSunsetTime","useMemo","utcTime","results","sunset","Date","toString","split","onClick","location","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","retry","mutations","client","contextSharing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","createRoot","render"],"mappings":"qIAGKA,E,wDCiBUC,EAlBK,WAelB,OAdiBC,sBAAW,uCAAC,WAAOC,GAAP,mBAAAC,EAAA,6DACrBC,EAAS,CACbC,OAAQ,OAFiB,SAKJC,OAAOC,MAAP,UAAgBL,GAAYE,GALxB,YAKrBI,EALqB,QAMdC,GANc,yCAOlBD,EAASE,QAPS,wBASEF,EAASG,OATX,eASnBC,EATmB,yBAUlBC,QAAQC,OAAO,IAAIC,MAAMH,KAVP,4CAAD,sDAYzB,M,SDZAb,K,QAAAA,E,kCAAAA,E,4BAAAA,E,6BAAAA,M,KAkBL,IAeeiB,EAfgB,SAACC,EAAoBC,GAClD,IAAMC,EAAWnB,IAEXoB,IAAsBH,KAASC,EAErC,OAAOG,mBACL,0BACA,kBACEF,EACE,8FAEJ,CAAEG,QAASF,KEhCFG,EAAa,WACbC,GAAc,SACrBC,EAAkB,CACtBR,IAAKM,EACLL,IAAKM,GAsBQE,EAnBK,WAClB,OAAKC,UAAUC,aAGbD,UAAUC,YAAYC,oBACpB,SAACC,GACC,MAAO,CACLb,IAAKa,EAASC,OAAOC,SACrBd,IAAKY,EAASC,OAAOE,cAGzB,WACE,OAAOR,KAINA,GAdEA,G,OC0CIS,EAzCE,WACf,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsBF,mBAAwB,MAA9C,mBAAOjB,EAAP,KAAYoB,EAAZ,KACA,EAAsBH,mBAAwB,MAA9C,mBAAOlB,EAAP,KAAYsB,EAAZ,KAEA,EAA4BvB,EAAuBC,EAAKC,GAAhDsB,EAAR,EAAQA,KAcFC,EAdN,EAAcC,WAcqBF,EAE7BG,EAAkBC,mBAAQ,WAE5B,IA7BgBC,EA4BlB,GAAIL,EAEF,OA9BgBK,EA6BgBL,EAAKM,QAAQC,OA5B3B,IAAIC,KAAKH,GACCI,WAAWC,MAAM,KAAK,KA8BnD,CAACV,IAEJ,OACE,qCACE,uGAGA,wBAAQW,QA1BO,WACjBd,GAAc,GACd,IAAMe,EAAW1B,IACjBa,EAAOa,EAASnC,KAChBqB,EAAOc,EAASlC,MAsBd,iBACA,wBAAQiC,QApBM,WAChBZ,EAAOhB,GACPe,EAAOd,IAkBL,gBACCY,IAAeK,GAAiB,4CAChCA,GAAiB,yCAAYE,SCzBrBU,EAjBC,WACd,IAAMC,EAAc,IAAIC,cAAY,CAClCC,eAAgB,CACdC,QAAS,CACPC,sBAAsB,EACtBC,MAAO,GAETC,UAAW,MAGf,OACE,cAAC,sBAAD,CAAqBC,OAAQP,EAAaQ,gBAAc,EAAxD,SACE,cAAC,EAAD,OCFSC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHRQ,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GACnBI,OACH,cAAC,aAAD,UACE,cAAC,EAAD,OAOJb,M","file":"static/js/main.1e657288.chunk.js","sourcesContent":["import { useQuery } from 'react-query';\nimport useFetchApi from './useFetchApi';\n\nenum SunriseApiStatus {\n  OK = 'OK',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  INVALID_DATE = 'INVALID_DATE',\n  UNKOWN_ERROR = 'UNKOWN_ERROR',\n}\n\ntype SunriseAndSunsetData = {\n  readonly sunrise: string;\n  readonly sunset: string;\n  readonly day_length: string;\n};\n\ntype SunriseAndSunsetResponse = {\n  readonly results: SunriseAndSunsetData;\n  readonly status: SunriseApiStatus;\n};\n\nconst useGetSunriseAndSunset = (lat: number | null, lng: number | null) => {\n  const fetchApi = useFetchApi();\n\n  const locationAvailable = !!lat && !!lng;\n\n  return useQuery(\n    'GET_SUNRISE_AND_SUNSET',\n    (): Promise<SunriseAndSunsetResponse> =>\n      fetchApi(\n        'https://api.sunrise-sunset.org/json?lat=51.4790545&lng=-0.2820995&date=today&formatted=0'\n      ),\n    { enabled: locationAvailable }\n  );\n};\n\nexport default useGetSunriseAndSunset;\n","import { useCallback } from 'react';\n\nconst useFetchApi = () => {\n  const fetchApi = useCallback(async (endpoint: string) => {\n    const config = {\n      method: 'GET',\n    };\n\n    const response = await window.fetch(`${endpoint}`, config);\n    if (response.ok) {\n      return response.json();\n    } else {\n      const errorMessage = await response.text();\n      return Promise.reject(new Error(errorMessage));\n    }\n  }, []);\n\n  return fetchApi;\n};\n\nexport default useFetchApi;\n","export const LONDON_LAT = 51.4790946;\nexport const LONDON_LNG = -0.2820046;\nconst LONDON_POSITION = {\n  lat: LONDON_LAT,\n  lng: LONDON_LNG,\n};\n\nconst getLocation = () => {\n  if (!navigator.geolocation) {\n    return LONDON_POSITION;\n  } else {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        return {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n      },\n      () => {\n        return LONDON_POSITION;\n      }\n    );\n  }\n  return LONDON_POSITION;\n};\n\nexport default getLocation;\n","import { useMemo, useState } from 'react';\nimport useGetSunriseAndSunset from './api/useGetSunriseAndSunset';\nimport getLocation, { LONDON_LAT, LONDON_LNG } from './getLocation';\n\nconst getLocalTime = (utcTime: string) => {\n  const localDateTime = new Date(utcTime);\n  const localTime = localDateTime.toString().split(' ')[4];\n  return localTime;\n};\n\nconst Playpiem = () => {\n  const [isLocating, setIsLocating] = useState(false);\n  const [lng, setLng] = useState<number | null>(null);\n  const [lat, setLat] = useState<number | null>(null);\n\n  const { data, isSuccess } = useGetSunriseAndSunset(lat, lng);\n\n  const onClickYes = () => {\n    setIsLocating(true);\n    const location = getLocation();\n    setLat(location.lat);\n    setLng(location.lng);\n  };\n\n  const onClickNo = () => {\n    setLat(LONDON_LAT);\n    setLng(LONDON_LNG);\n  };\n\n  const locationFound = isSuccess && data;\n\n  const localSunsetTime = useMemo(() => {\n    if (data) {\n      const sunsetTime = getLocalTime(data.results.sunset);\n      return sunsetTime;\n    }\n  }, [data]);\n\n  return (\n    <>\n      <h1>\n        Can we get your location? If you say no, we will just go with London!\n      </h1>\n      <button onClick={onClickYes}>Yes</button>\n      <button onClick={onClickNo}>No</button>\n      {isLocating && !locationFound && <p>Locating...</p>}\n      {locationFound && <p>Sunset: {localSunsetTime}</p>}\n    </>\n  );\n};\n\nexport default Playpiem;\n","import { FC } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport Playpiem from './Playpiem';\n\nconst App: FC = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        refetchOnWindowFocus: false,\n        retry: 0,\n      },\n      mutations: {},\n    },\n  });\n  return (\n    <QueryClientProvider client={queryClient} contextSharing>\n      <Playpiem />\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root')!;\nconst root = createRoot(rootElement);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["api/useGetSunriseAndSunset.tsx","api/useFetchApi.tsx","api/useGetLocation.tsx","Playpiem/constants.ts","Playpiem/icons/PlaySvg.tsx","Playpiem/styles.ts","Playpiem/timeCalculations/getCurrentTime.ts","Playpiem/timeCalculations/getLocalSunsetTime.tsx","Playpiem/index.tsx","Playpiem/Playpiem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SunriseApiStatus","useFetchApi","useCallback","endpoint","config","method","window","fetch","response","ok","json","text","errorMessage","Promise","reject","Error","useGetLocationByIp","fetchApi","useQuery","process","useGetSunriseAndSunset","lat","lng","locationAvailable","enabled","PlaySvg","width","height","viewBox","fill","xmlns","clipPath","d","id","Container","styled","div","props","isNightTime","CityText","p","Disclaimer","Lock","span","IconWrapper","getCurrentTime","localDateTime","Date","unixTime","getTime","readableTime","toString","split","getLocalSunsetTime","utcTime","Playpiem","useState","setLng","setLat","time","setTime","useEffect","interval","setInterval","clearInterval","data","isLoading","isSuccess","sunData","sunDataLoading","sunDataSuccess","refetch","slice","join","localSunsetTime","useMemo","utcSunset","results","sunset","localSunriseTime","utcSunrise","sunrise","loc","userLat","userLng","isAfterSunset","city","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","retry","mutations","client","contextSharing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.3496fe3c.chunk.js","sourcesContent":["import { useQuery } from 'react-query';\nimport useFetchApi from './useFetchApi';\n\nenum SunriseApiStatus {\n  OK = 'OK',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  INVALID_DATE = 'INVALID_DATE',\n  UNKOWN_ERROR = 'UNKOWN_ERROR',\n}\n\ntype SunriseAndSunsetData = {\n  readonly sunrise: string;\n  readonly sunset: string;\n  readonly day_length: string;\n};\n\ntype SunriseAndSunsetResponse = {\n  readonly results: SunriseAndSunsetData;\n  readonly status: SunriseApiStatus;\n};\n\nconst useGetSunriseAndSunset = (lat: string | null, lng: string | null) => {\n  const fetchApi = useFetchApi();\n\n  const locationAvailable = !!lat && !!lng;\n\n  return useQuery(\n    'GET_SUNRISE_AND_SUNSET',\n    (): Promise<SunriseAndSunsetResponse> =>\n      fetchApi(\n        `https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=today&formatted=0`\n      ),\n    { enabled: locationAvailable }\n  );\n};\n\nexport default useGetSunriseAndSunset;\n","import { useCallback } from 'react';\n\nconst useFetchApi = () => {\n  const fetchApi = useCallback(async (endpoint: string) => {\n    const config = {\n      method: 'GET',\n    };\n\n    const response = await window.fetch(`${endpoint}`, config);\n    if (response.ok) {\n      return response.json();\n    } else {\n      const errorMessage = await response.text();\n      return Promise.reject(new Error(errorMessage));\n    }\n  }, []);\n\n  return fetchApi;\n};\n\nexport default useFetchApi;\n","import { useQuery } from 'react-query';\nimport { IP_LOCATION_TOKEN } from '../Playpiem/constants';\nimport useFetchApi from './useFetchApi';\n\ntype IpLocationResponse = {\n  readonly ip: string;\n  readonly city: string;\n  readonly region: string;\n  readonly country: string;\n  readonly loc: string;\n  readonly org: string;\n  readonly postal: string;\n  readonly timezone: string;\n};\n\nconst useGetLocationByIp = () => {\n  const fetchApi = useFetchApi();\n  return useQuery(\n    'GET_LOCATION_BY_IP',\n    (): Promise<IpLocationResponse> =>\n      fetchApi(`https://ipinfo.io/json?token=${IP_LOCATION_TOKEN}`)\n  );\n};\n\nexport default useGetLocationByIp;\n","const IP_LOCATION_TOKEN = process.env.REACT_APP_IP_LOCATION_TOKEN;\nconst ONE_MINUTE = 60000;\nconst MIDNIGHT_WITHOUT_SECONDS = '00:00';\n\nexport { IP_LOCATION_TOKEN, ONE_MINUTE, MIDNIGHT_WITHOUT_SECONDS };\n","const PlaySvg = () => {\n  return (\n    <svg\n      width=\"330\"\n      height=\"330\"\n      viewBox=\"0 0 330 330\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g clipPath=\"url(#clip0_1_2)\">\n        <path\n          d=\"M37.728 328.12C39.994 329.376 42.498 330 45 330C47.763 330 50.522 329.237 52.95 327.72L292.95 177.721C297.336 174.98 300 170.173 300 165.001C300 159.829 297.336 155.022 292.95 152.281L52.95 2.28C48.325 -0.611001 42.497 -0.763001 37.728 1.88C32.959 4.524 30 9.547 30 15V315C30 320.453 32.959 325.476 37.728 328.12Z\"\n          fill=\"white\"\n        />\n      </g>\n      <defs>\n        <clipPath id=\"clip0_1_2\">\n          <rect width=\"330\" height=\"330\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n\nexport default PlaySvg;\n","import styled from 'styled-components/macro';\n\nexport const Container = styled.div<{ readonly isNightTime?: boolean }>`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: ${(props) => (props.isNightTime ? 'black' : 'black')};\n\n  & > p {\n    color: ${(props) => (props.isNightTime ? 'white' : 'white')};\n    margin: 40px;\n  }\n\n  & > div > svg {\n    width: 30px;\n    height: 30px;\n    z-index: 10;\n    cursor: ${(props) => (props.isNightTime ? 'pointer' : 'auto')};\n    opacity: ${(props) => (props.isNightTime ? '100%' : '0')};\n    transition: opacity 1.3s ease-in, cursor 1.3s ease-in;\n    :hover {\n      opacity: ${(props) => (props.isNightTime ? '90%' : '0')};\n    }\n    position: absolute;\n    margin-left: auto;\n    margin-right: auto;\n    left: 0;\n    right: 0;\n    text-align: center;\n  }\n\n  transition: background-color 2s ease-in;\n`;\n\nexport const CityText = styled.p`\n  font-size: 24px;\n  opacity: 90%;\n  font-weight: 600;\n`;\n\nexport const Disclaimer = styled.p`\n  font-size: 12px;\n  opacity: 80%;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin-bottom: 24px;\n`;\n\nexport const Lock = styled.span<{ readonly isNightTime?: boolean }>`\n  width: 24px;\n  height: 21px;\n  border: 3px solid white;\n  border-radius: 5px;\n  position: relative;\n  transform: ${(props) => (props.isNightTime ? 'rotate(10deg)' : '')};\n  opacity: ${(props) => (props.isNightTime ? '0' : '100')};\n  transition: opacity 1.3s ease-out, cursor 1.3s ease-out;\n  position: absolute;\n  margin-left: auto;\n  margin-right: auto;\n  left: 0;\n  right: 0;\n  text-align: center;\n\n  :after {\n    content: '';\n    display: block;\n    background: white;\n    width: 3px;\n    height: 7px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin: -3.5px 0 0 -2px;\n    -webkit-transition: all 0.1s ease-in-out;\n    transition: all 0.1s ease-in-out;\n  }\n\n  :before {\n    content: '';\n    display: block;\n    width: 10px;\n    height: 10px;\n    position: absolute;\n    border: 3px solid white;\n    border-top-right-radius: 50%;\n    border-top-left-radius: 50%;\n    border-bottom: 0;\n    -webkit-transition: all 0.1s ease-in-out;\n    transition: all 0.1s ease-in-out;\n\n    :hover {\n      height: 12px;\n    }\n\n    bottom: ${(props) => (props.isNightTime ? '130%' : '100%')};\n    left: ${(props) => (props.isNightTime ? '31%' : '50%')};\n    margin-left: ${(props) => (props.isNightTime ? '-11.5px' : '-8px')};\n    transform: ${(props) => (props.isNightTime ? 'rotate(-45deg)' : '')};\n  }\n`;\n\nexport const IconWrapper = styled.div`\n  position: relative;\n  width: 100px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","const getCurrentTime = () => {\n  const localDateTime = new Date();\n  const unixTime = localDateTime.getTime();\n  const localTime = localDateTime.toString().split(' ')[4];\n  return { readableTime: localTime, unixTime };\n};\n\nexport default getCurrentTime;\n","const getLocalSunsetTime = (utcTime: string) => {\n  const localDateTime = new Date(utcTime);\n  const unixTime = localDateTime.getTime();\n  const localTime = localDateTime.toString().split(' ')[4];\n  return { readableTime: localTime, unixTime };\n};\n\nexport default getLocalSunsetTime;\n","import Playpiem from './Playpiem';\n\nexport default Playpiem;\n","import { useEffect, useMemo, useState } from 'react';\nimport useGetLocationByIp from '../api/useGetLocation';\nimport useGetSunriseAndSunset from '../api/useGetSunriseAndSunset';\nimport { MIDNIGHT_WITHOUT_SECONDS, ONE_MINUTE } from './constants';\nimport PlaySvg from './icons/PlaySvg';\nimport { Time } from './schemas';\nimport { CityText, Container, Disclaimer, IconWrapper, Lock } from './styles';\nimport getCurrentTime from './timeCalculations/getCurrentTime';\nimport getLocalSunsetTime from './timeCalculations/getLocalSunsetTime';\n\nconst Playpiem = () => {\n  const [lng, setLng] = useState<string | null>(null);\n  const [lat, setLat] = useState<string | null>(null);\n  const [time, setTime] = useState<Time | null>(getCurrentTime);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(getCurrentTime);\n    }, ONE_MINUTE);\n    return () => clearInterval(interval);\n  }, []);\n\n  const { data, isLoading, isSuccess } = useGetLocationByIp();\n  const {\n    data: sunData,\n    isLoading: sunDataLoading,\n    isSuccess: sunDataSuccess,\n    refetch,\n  } = useGetSunriseAndSunset(lat, lng);\n\n  useEffect(() => {\n    if (time && data) {\n      const { readableTime } = time;\n      const timeWithoutSeconds = readableTime.split(':').slice(0, -1).join(':');\n\n      const currentTimeIsMidnight =\n        timeWithoutSeconds === MIDNIGHT_WITHOUT_SECONDS;\n\n      if (currentTimeIsMidnight) {\n        refetch();\n      }\n    }\n  }, [time, refetch, data]);\n\n  const localSunsetTime: Time | undefined = useMemo(() => {\n    if (sunData) {\n      const utcSunset = sunData.results.sunset;\n      const sunsetTime = getLocalSunsetTime(utcSunset);\n      return sunsetTime;\n    }\n  }, [sunData]);\n\n  const localSunriseTime: Time | undefined = useMemo(() => {\n    if (sunData) {\n      const utcSunrise = sunData.results.sunrise;\n      const sunriseTime = getLocalSunsetTime(utcSunrise);\n      return sunriseTime;\n    }\n  }, [sunData]);\n\n  useEffect(() => {\n    if (data) {\n      const { loc: location } = data;\n      const [userLat, userLng] = location.split(',');\n      setLat(userLat);\n      setLng(userLng);\n    }\n  }, [data]);\n\n  const isNightTime = useMemo(() => {\n    if (!time || !localSunsetTime || !localSunriseTime) {\n      return false;\n    }\n    const isAfterSunset = time.unixTime > localSunsetTime.unixTime;\n    const isBeforeSunrise = time.unixTime < localSunriseTime.unixTime;\n    if (isBeforeSunrise || isAfterSunset) {\n      return true;\n    }\n    return false;\n  }, [time, localSunsetTime, localSunriseTime]);\n\n  if (isLoading || sunDataLoading) {\n    return (\n      <Container>\n        <p>Locating...</p>\n      </Container>\n    );\n  }\n\n  if (isSuccess && sunDataSuccess) {\n    return (\n      <Container isNightTime={isNightTime}>\n        <CityText>{data.city}</CityText>\n        <IconWrapper>\n          <PlaySvg />\n          <Lock isNightTime={isNightTime} />\n        </IconWrapper>\n        <p>Sunset: {localSunsetTime?.readableTime}</p>\n        <Disclaimer>The location is determined by your ip address</Disclaimer>\n      </Container>\n    );\n  }\n\n  return null;\n};\n\nexport default Playpiem;\n","import { FC } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport Holding from './Playpiem';\n\nconst App: FC = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        refetchOnWindowFocus: false,\n        retry: 0,\n      },\n      mutations: {},\n    },\n  });\n  return (\n    <QueryClientProvider client={queryClient} contextSharing>\n      <Holding />\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root')!;\nconst root = createRoot(rootElement);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
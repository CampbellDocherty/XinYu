{"version":3,"sources":["api/useGetSunriseAndSunset.tsx","Playpiem/constants.ts","api/useFetchApi.tsx","api/useGetLocation.tsx","Playpiem/context/LocationContext.tsx","Playpiem/context/LocationProvider.tsx","Playpiem/hooks/useCalculateIsNightTime.tsx","Playpiem/timeCalculations/getLocalSunsetTime.tsx","Playpiem/hooks/useGetLocalTime.tsx","Playpiem/hooks/useRefetchSunDataAtMidnight.tsx","Playpiem/timeCalculations/getCurrentTime.ts","Playpiem/context/TimeContext.tsx","Playpiem/context/TimeProvider.tsx","Playpiem/icons/PlaySvg.tsx","Playpiem/styles.ts","Playpiem/SunsetTime.tsx","Playpiem/index.tsx","Playpiem/Playpiem.tsx","Playpiem/CheckIfNightTime.tsx","Playpiem/Night.tsx","routers/Router.tsx","styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SunriseApiStatus","DEFAULT_LONDON_LOCATION","city","lng","lat","useFetchApi","useCallback","endpoint","config","method","window","fetch","response","ok","json","text","errorMessage","Promise","reject","Error","useGetLocationByIp","fetchApi","useQuery","process","LocationContext","createContext","isLocating","errorLocating","hasLocated","location","LocationProvider","children","useState","setLocation","data","isLoading","isSuccess","isError","useEffect","loc","split","providerData","Provider","value","useGetSunriseAndSunset","locationAvailable","enabled","useCalculateIsNightTime","time","localSunriseTime","localSunsetTime","useMemo","isAfterSunset","unixTime","convertUtcTimeToLocalTime","utcTime","localDateTime","Date","getTime","readableTime","toString","useGetLocalTime","useRefetchSunDataAtMidnight","refetch","slice","join","getTimeWithoutSeconds","getCurrentTime","TimeContext","isNightTime","undefined","sunset","TimeProvider","useContext","setTime","interval","setInterval","clearInterval","isRefetching","results","sunrise","PlaySvg","width","height","viewBox","fill","xmlns","clipPath","d","id","CityText","styled","p","Disclaimer","Lock","span","props","IconWrapper","div","PlayButton","button","SunsetTime","navigate","useNavigate","onClick","Playpiem","CheckIfNightTime","Night","AppRouter","path","element","to","replace","Container","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","retry","mutations","client","contextSharing","Router","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.3713f45d.chunk.js","sourcesContent":["import { useQuery } from 'react-query';\nimport { Location } from '../Playpiem/schemas';\nimport useFetchApi from './useFetchApi';\n\nenum SunriseApiStatus {\n  OK = 'OK',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  INVALID_DATE = 'INVALID_DATE',\n  UNKOWN_ERROR = 'UNKOWN_ERROR',\n}\n\ntype SunriseAndSunsetData = {\n  readonly sunrise: string;\n  readonly sunset: string;\n  readonly day_length: string;\n};\n\ntype SunriseAndSunsetResponse = {\n  readonly results: SunriseAndSunsetData;\n  readonly status: SunriseApiStatus;\n};\n\nconst useGetSunriseAndSunset = (location: Location) => {\n  const fetchApi = useFetchApi();\n  const { lng, lat } = location;\n  const locationAvailable = !!lng && !!lat;\n  return useQuery(\n    'GET_SUNRISE_AND_SUNSET',\n    (): Promise<SunriseAndSunsetResponse> =>\n      fetchApi(\n        `https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=today&formatted=0`\n      ),\n    { enabled: locationAvailable }\n  );\n};\n\nexport default useGetSunriseAndSunset;\n","const IP_LOCATION_TOKEN = process.env.REACT_APP_IP_LOCATION_TOKEN;\nconst ONE_MINUTE = 60000;\nconst MIDNIGHT_WITHOUT_SECONDS = '00:00';\nconst DEFAULT_LONDON_LOCATION = {\n  city: 'London',\n  lng: '\t-0.118092',\n  lat: '51.509865',\n};\n\nexport {\n  IP_LOCATION_TOKEN,\n  ONE_MINUTE,\n  MIDNIGHT_WITHOUT_SECONDS,\n  DEFAULT_LONDON_LOCATION,\n};\n","import { useCallback } from 'react';\n\nconst useFetchApi = () => {\n  const fetchApi = useCallback(async (endpoint: string) => {\n    const config = {\n      method: 'GET',\n    };\n\n    const response = await window.fetch(`${endpoint}`, config);\n    if (response.ok) {\n      return response.json();\n    } else {\n      const errorMessage = await response.text();\n      return Promise.reject(new Error(errorMessage));\n    }\n  }, []);\n\n  return fetchApi;\n};\n\nexport default useFetchApi;\n","import { useQuery } from 'react-query';\nimport { IP_LOCATION_TOKEN } from '../Playpiem/constants';\nimport useFetchApi from './useFetchApi';\n\ntype IpLocationResponse = {\n  readonly ip: string;\n  readonly city: string;\n  readonly region: string;\n  readonly country: string;\n  readonly loc: string;\n  readonly org: string;\n  readonly postal: string;\n  readonly timezone: string;\n};\n\nconst useGetLocationByIp = () => {\n  const fetchApi = useFetchApi();\n  return useQuery(\n    'GET_LOCATION_BY_IP',\n    (): Promise<IpLocationResponse> =>\n      fetchApi(`https://ipinfo.io/json?token=${IP_LOCATION_TOKEN}`)\n  );\n};\n\nexport default useGetLocationByIp;\n","import { createContext } from 'react';\nimport { Location } from '../schemas';\n\ninterface LocationContextType {\n  readonly isLocating: boolean;\n  readonly hasLocated: boolean;\n  readonly errorLocating: boolean;\n  readonly location: Location;\n}\n\nconst LocationContext = createContext<LocationContextType>({\n  isLocating: true,\n  errorLocating: false,\n  hasLocated: false,\n  location: {\n    city: '',\n    lng: '',\n    lat: '',\n  },\n});\n\nexport default LocationContext;\n","import { ReactNode, useEffect, useState } from 'react';\nimport useGetLocationByIp from '../../api/useGetLocation';\nimport { DEFAULT_LONDON_LOCATION } from '../constants';\nimport { Location } from '../schemas';\nimport LocationContext from './LocationContext';\n\nconst LocationProvider = ({ children }: { readonly children: ReactNode }) => {\n  const [location, setLocation] = useState<Location>({\n    city: '',\n    lng: '',\n    lat: '',\n  });\n\n  const {\n    data,\n    isLoading: isLocating,\n    isSuccess: hasLocated,\n    isError: errorLocating,\n  } = useGetLocationByIp();\n\n  useEffect(() => {\n    if (hasLocated) {\n      const [lat, lng] = data.loc.split(',');\n      setLocation({ city: data.city, lat, lng });\n    }\n  }, [data, hasLocated]);\n\n  useEffect(() => {\n    if (errorLocating) {\n      setLocation(DEFAULT_LONDON_LOCATION);\n    }\n  }, [errorLocating]);\n\n  const providerData = {\n    isLocating,\n    errorLocating,\n    hasLocated,\n    location,\n  };\n\n  return (\n    <LocationContext.Provider value={providerData}>\n      {children}\n    </LocationContext.Provider>\n  );\n};\n\nexport default LocationProvider;\n","import { useMemo } from 'react';\nimport { Time } from '../schemas';\n\ninterface CaluclateNightTimeHookArgs {\n  readonly time: Time | null;\n  readonly localSunriseTime: Time | undefined;\n  readonly localSunsetTime: Time | undefined;\n}\n\nconst useCalculateIsNightTime = ({\n  time,\n  localSunriseTime,\n  localSunsetTime,\n}: CaluclateNightTimeHookArgs) => {\n  const isNightTime = useMemo(() => {\n    if (!time || !localSunsetTime || !localSunriseTime) {\n      return false;\n    }\n    const isAfterSunset = time.unixTime > localSunsetTime.unixTime;\n    const isBeforeSunrise = time.unixTime < localSunriseTime.unixTime;\n    if (isBeforeSunrise || isAfterSunset) {\n      return true;\n    }\n    return false;\n  }, [time, localSunsetTime, localSunriseTime]);\n\n  return isNightTime;\n};\n\nexport default useCalculateIsNightTime;\n","const convertUtcTimeToLocalTime = (utcTime: string) => {\n  const localDateTime = new Date(utcTime);\n  const unixTime = localDateTime.getTime();\n  const localTime = localDateTime.toString().split(' ')[4];\n  return { readableTime: localTime, unixTime };\n};\n\nexport default convertUtcTimeToLocalTime;\n","import { useMemo } from 'react';\nimport { Time } from '../schemas';\nimport convertUtcTimeToLocalTime from '../timeCalculations/getLocalSunsetTime';\n\nconst useGetLocalTime = (utcTime: string | undefined) => {\n  const localTime: Time | undefined = useMemo(() => {\n    if (utcTime) {\n      const time = convertUtcTimeToLocalTime(utcTime);\n      return time;\n    }\n  }, [utcTime]);\n\n  return localTime;\n};\n\nexport default useGetLocalTime;\n","import { UseQueryResult } from 'react-query';\nimport { MIDNIGHT_WITHOUT_SECONDS } from '../constants';\nimport { Time } from '../schemas';\n\nconst getTimeWithoutSeconds = (time: string) => {\n  return time.split(':').slice(0, -1).join(':');\n};\n\nconst useRefetchSunDataAtMidnight = (\n  time: Time | null,\n  refetch: (options?: {\n    readonly throwOnError: boolean;\n    readonly cancelRefetch: boolean;\n  }) => Promise<UseQueryResult>\n) => {\n  if (time) {\n    const { readableTime } = time;\n    const timeWithoutSeconds = getTimeWithoutSeconds(readableTime);\n\n    const currentTimeIsMidnight =\n      timeWithoutSeconds === MIDNIGHT_WITHOUT_SECONDS;\n\n    if (currentTimeIsMidnight) {\n      refetch();\n    }\n  }\n};\n\nexport default useRefetchSunDataAtMidnight;\n","const getCurrentTime = () => {\n  const localDateTime = new Date();\n  const unixTime = localDateTime.getTime();\n  const localTime = localDateTime.toString().split(' ')[4];\n  return { readableTime: localTime, unixTime };\n};\n\nexport default getCurrentTime;\n","import { createContext } from 'react';\n\ninterface TimeContextType {\n  readonly isLoading: boolean;\n  readonly isSuccess: boolean;\n  readonly isError: boolean;\n  readonly isNightTime: boolean | undefined;\n  readonly sunset: string | undefined;\n}\n\nconst TimeContext = createContext<TimeContextType>({\n  isLoading: true,\n  isSuccess: false,\n  isError: false,\n  isNightTime: undefined,\n  sunset: '',\n});\n\nexport default TimeContext;\n","import { ReactNode, useContext, useEffect, useState } from 'react';\nimport useGetSunriseAndSunset from '../../api/useGetSunriseAndSunset';\nimport { ONE_MINUTE } from '../constants';\nimport useCalculateIsNightTime from '../hooks/useCalculateIsNightTime';\nimport useGetLocalTime from '../hooks/useGetLocalTime';\nimport useRefetchSunDataAtMidnight from '../hooks/useRefetchSunDataAtMidnight';\nimport { Time } from '../schemas';\nimport getCurrentTime from '../timeCalculations/getCurrentTime';\nimport LocationContext from './LocationContext';\nimport TimeContext from './TimeContext';\n\nconst TimeProvider = ({ children }: { readonly children: ReactNode }) => {\n  const { location } = useContext(LocationContext);\n  const [time, setTime] = useState<Time>(getCurrentTime);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(getCurrentTime);\n    }, ONE_MINUTE);\n    return () => clearInterval(interval);\n  }, []);\n\n  const { data, isLoading, isSuccess, isError, refetch, isRefetching } =\n    useGetSunriseAndSunset(location);\n\n  useRefetchSunDataAtMidnight(time, refetch);\n\n  const localSunsetTime = useGetLocalTime(data?.results.sunset);\n  const localSunriseTime = useGetLocalTime(data?.results.sunrise);\n\n  const isNightTime = useCalculateIsNightTime({\n    time,\n    localSunriseTime,\n    localSunsetTime,\n  });\n\n  const providerData = {\n    isLoading: isLoading || isRefetching,\n    isSuccess,\n    isError,\n    sunset: localSunsetTime?.readableTime,\n    isNightTime,\n  };\n\n  return (\n    <TimeContext.Provider value={providerData}>{children}</TimeContext.Provider>\n  );\n};\n\nexport default TimeProvider;\n","const PlaySvg = () => {\n  return (\n    <svg\n      width=\"330\"\n      height=\"330\"\n      viewBox=\"0 0 330 330\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g clipPath=\"url(#clip0_1_2)\">\n        <path\n          d=\"M37.728 328.12C39.994 329.376 42.498 330 45 330C47.763 330 50.522 329.237 52.95 327.72L292.95 177.721C297.336 174.98 300 170.173 300 165.001C300 159.829 297.336 155.022 292.95 152.281L52.95 2.28C48.325 -0.611001 42.497 -0.763001 37.728 1.88C32.959 4.524 30 9.547 30 15V315C30 320.453 32.959 325.476 37.728 328.12Z\"\n          fill=\"white\"\n        />\n      </g>\n      <defs>\n        <clipPath id=\"clip0_1_2\">\n          <rect width=\"330\" height=\"330\" fill=\"white\" />\n        </clipPath>\n      </defs>\n    </svg>\n  );\n};\n\nexport default PlaySvg;\n","import styled from 'styled-components/macro';\n\nexport const CityText = styled.p`\n  font-size: 24px;\n  opacity: 90%;\n  font-weight: 600;\n`;\n\nexport const Disclaimer = styled.p`\n  font-size: 12px;\n  opacity: 80%;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin-bottom: 24px;\n`;\n\nexport const Lock = styled.span<{ readonly isNightTime?: boolean }>`\n  width: 24px;\n  height: 21px;\n  border: 3px solid white;\n  border-radius: 5px;\n  position: relative;\n  transform: ${(props) => (props.isNightTime ? 'rotate(10deg)' : '')};\n  opacity: ${(props) => (props.isNightTime ? '0' : '100')};\n  transition: opacity 1.3s ease-out, cursor 1.3s ease-out;\n  position: absolute;\n  margin-left: auto;\n  margin-right: auto;\n  left: 0;\n  right: 0;\n  text-align: center;\n\n  :after {\n    content: '';\n    display: block;\n    background: white;\n    width: 3px;\n    height: 7px;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    margin: -3.5px 0 0 -2px;\n    -webkit-transition: all 0.1s ease-in-out;\n    transition: all 0.1s ease-in-out;\n  }\n\n  :before {\n    content: '';\n    display: block;\n    width: 10px;\n    height: 10px;\n    position: absolute;\n    border: 3px solid white;\n    border-top-right-radius: 50%;\n    border-top-left-radius: 50%;\n    border-bottom: 0;\n    -webkit-transition: all 0.1s ease-in-out;\n    transition: all 0.1s ease-in-out;\n\n    :hover {\n      height: 12px;\n    }\n\n    bottom: ${(props) => (props.isNightTime ? '130%' : '100%')};\n    left: ${(props) => (props.isNightTime ? '31%' : '50%')};\n    margin-left: ${(props) => (props.isNightTime ? '-11.5px' : '-8px')};\n    transform: ${(props) => (props.isNightTime ? 'rotate(-45deg)' : '')};\n  }\n`;\n\nexport const IconWrapper = styled.div<{\n  readonly isNightTime: boolean | undefined;\n}>`\n  position: relative;\n  width: 100px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  & > svg {\n    width: 30px;\n    height: 30px;\n    z-index: 10;\n    cursor: ${(props) => (props.isNightTime ? 'pointer' : 'auto')};\n    opacity: ${(props) => (props.isNightTime ? '100%' : '0')};\n    transition: opacity 1.3s ease-in, cursor 1.3s ease-in;\n    :hover {\n      opacity: ${(props) => (props.isNightTime ? '90%' : '0')};\n    }\n    position: absolute;\n    margin-left: auto;\n    margin-right: auto;\n    left: 0;\n    right: 0;\n    text-align: center;\n  }\n`;\n\nexport const PlayButton = styled.button<{\n  readonly isNightTime: boolean | undefined;\n}>`\n  position: absolute;\n  margin-left: auto;\n  margin-right: auto;\n  left: 0;\n  right: 0;\n  text-align: center;\n  width: 40px;\n  height: 40px;\n  z-index: 10;\n  background-color: transparent;\n  border: none;\n  padding: 5px;\n  border-radius: 3px;\n\n  cursor: ${(props) => (props.isNightTime ? 'pointer' : 'auto')};\n  opacity: ${(props) => (props.isNightTime ? '100%' : '0')};\n  transition: opacity 1.3s ease-in, cursor 1.3s ease-in;\n\n  :hover {\n    opacity: ${(props) => (props.isNightTime ? '90%' : '0')};\n  }\n\n  :focus {\n    opacity: ${(props) => (props.isNightTime ? '90%' : '0')};\n    outline: 1px solid white;\n    border: none;\n  }\n\n  & > svg {\n    width: 100%;\n    height: 100%;\n  }\n`;\n","import { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport LocationContext from './context/LocationContext';\nimport TimeContext from './context/TimeContext';\nimport PlaySvg from './icons/PlaySvg';\nimport { CityText, Disclaimer, IconWrapper, Lock, PlayButton } from './styles';\n\nconst SunsetTime = () => {\n  const navigate = useNavigate();\n  const { isNightTime, sunset } = useContext(TimeContext);\n  const { location } = useContext(LocationContext);\n\n  const onClick = () => {\n    if (!isNightTime) {\n      return;\n    }\n\n    navigate('/night');\n  };\n\n  return (\n    <>\n      <CityText>{location.city}</CityText>\n      <IconWrapper isNightTime={isNightTime}>\n        <PlayButton onClick={onClick} isNightTime={isNightTime}>\n          <PlaySvg />\n        </PlayButton>\n        <Lock isNightTime={isNightTime} />\n      </IconWrapper>\n      <p>Sunset: {sunset}</p>\n      <Disclaimer>The location is determined by your ip address</Disclaimer>\n    </>\n  );\n};\n\nexport default SunsetTime;\n","import Playpiem from './Playpiem';\n\nexport default Playpiem;\n","import { useContext } from 'react';\nimport SunsetTime from './SunsetTime';\nimport LocationContext from './context/LocationContext';\nimport TimeContext from './context/TimeContext';\n\nconst Playpiem = () => {\n  const { isLoading, isSuccess, isError } = useContext(TimeContext);\n  const { isLocating } = useContext(LocationContext);\n\n  if (isLoading || isLocating) {\n    return <p>Locating...</p>;\n  }\n\n  if (isError) {\n    return <p>Something went wrong, please try again</p>;\n  }\n\n  if (isSuccess) {\n    return <SunsetTime />;\n  }\n\n  return null;\n};\n\nexport default Playpiem;\n","import { ReactNode, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport TimeContext from './context/TimeContext';\n\nconst CheckIfNightTime = ({ children }: { readonly children: ReactNode }) => {\n  const navigate = useNavigate();\n  const { isNightTime, isSuccess } = useContext(TimeContext);\n\n  useEffect(() => {\n    if (isSuccess && !isNightTime) {\n      navigate('/');\n    }\n  }, [isNightTime, navigate, isSuccess]);\n\n  return <>{children}</>;\n};\n\nexport default CheckIfNightTime;\n","const Night = () => {\n  return <p>hey</p>;\n};\n\nexport default Night;\n","import { Route, BrowserRouter, Routes, Navigate } from 'react-router-dom';\nimport Playpiem from '../Playpiem';\nimport CheckIfNightTime from '../Playpiem/CheckIfNightTime';\nimport Night from '../Playpiem/Night';\n\nconst AppRouter = () => {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Playpiem />} />\n        <Route\n          path=\"/night\"\n          element={\n            <CheckIfNightTime>\n              <Night />\n            </CheckIfNightTime>\n          }\n        />\n        <Route path=\"*\" element={<Navigate to=\"/\" replace />} />\n      </Routes>\n    </BrowserRouter>\n  );\n};\n\nexport default AppRouter;\n","import styled from 'styled-components/macro';\n\nexport const Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: black;\n\n  & > p {\n    color: white;\n    margin: 40px;\n  }\n\n  transition: background-color 2s ease-in;\n`;\n","import { FC } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport LocationProvider from './Playpiem/context/LocationProvider';\nimport TimeProvider from './Playpiem/context/TimeProvider';\nimport Router from './routers/Router';\nimport { Container } from './styles';\n\nconst App: FC = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        refetchOnWindowFocus: false,\n        retry: 0,\n      },\n      mutations: {},\n    },\n  });\n  return (\n    <QueryClientProvider client={queryClient} contextSharing>\n      <LocationProvider>\n        <TimeProvider>\n          <Container>\n            <Router />\n          </Container>\n        </TimeProvider>\n      </LocationProvider>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root')!;\nconst root = createRoot(rootElement);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["api/useGetLocation.tsx","api/useFetchApi.tsx","api/useGetSunriseAndSunset copy.tsx","Playpiem/constants.ts","Playpiem/styles.ts","Playpiem/timeCalculations/getCurrentTime.ts","Playpiem/timeCalculations/getLocalSunsetTime.tsx","Playpiem/index.tsx","Playpiem/Playpiem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SunriseApiStatus","useFetchApi","useCallback","endpoint","config","method","window","fetch","response","ok","json","text","errorMessage","Promise","reject","Error","useGetSunriseAndSunset","lat","lng","fetchApi","locationAvailable","useQuery","enabled","useGetLocationByIp","process","Container","styled","div","props","isNightTime","Disclaimer","p","getCurrentTime","Date","toString","split","getLocalSunsetTime","utcTime","Playpiem","useState","setLng","setLat","time","setTime","useEffect","interval","setInterval","clearInterval","data","isLoading","isSuccess","sunData","sunDataLoading","sunDataSuccess","localSunsetTime","useMemo","utcSunset","results","sunset","loc","userLat","userLng","city","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","retry","mutations","client","contextSharing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.76dd2981.chunk.js","sourcesContent":["import { useQuery } from 'react-query';\nimport useFetchApi from './useFetchApi';\n\nenum SunriseApiStatus {\n  OK = 'OK',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  INVALID_DATE = 'INVALID_DATE',\n  UNKOWN_ERROR = 'UNKOWN_ERROR',\n}\n\ntype SunriseAndSunsetData = {\n  readonly sunrise: string;\n  readonly sunset: string;\n  readonly day_length: string;\n};\n\ntype SunriseAndSunsetResponse = {\n  readonly results: SunriseAndSunsetData;\n  readonly status: SunriseApiStatus;\n};\n\nconst useGetSunriseAndSunset = (lat: string | null, lng: string | null) => {\n  const fetchApi = useFetchApi();\n\n  const locationAvailable = !!lat && !!lng;\n\n  return useQuery(\n    'GET_SUNRISE_AND_SUNSET',\n    (): Promise<SunriseAndSunsetResponse> =>\n      fetchApi(\n        `https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=today&formatted=0`\n      ),\n    { enabled: locationAvailable }\n  );\n};\n\nexport default useGetSunriseAndSunset;\n","import { useCallback } from 'react';\n\nconst useFetchApi = () => {\n  const fetchApi = useCallback(async (endpoint: string) => {\n    const config = {\n      method: 'GET',\n    };\n\n    const response = await window.fetch(`${endpoint}`, config);\n    if (response.ok) {\n      return response.json();\n    } else {\n      const errorMessage = await response.text();\n      return Promise.reject(new Error(errorMessage));\n    }\n  }, []);\n\n  return fetchApi;\n};\n\nexport default useFetchApi;\n","import { useQuery } from 'react-query';\nimport { IP_LOCATION_TOKEN } from '../Playpiem/constants';\nimport useFetchApi from './useFetchApi';\n\ntype IpLocationResponse = {\n  readonly ip: string;\n  readonly city: string;\n  readonly region: string;\n  readonly country: string;\n  readonly loc: string;\n  readonly org: string;\n  readonly postal: string;\n  readonly timezone: string;\n};\n\nconst useGetLocationByIp = () => {\n  const fetchApi = useFetchApi();\n  return useQuery(\n    'GET_LOCATION_BY_IP',\n    (): Promise<IpLocationResponse> =>\n      fetchApi(`https://ipinfo.io/json?token=${IP_LOCATION_TOKEN}`)\n  );\n};\n\nexport default useGetLocationByIp;\n","const IP_LOCATION_TOKEN = process.env.REACT_APP_IP_LOCATION_TOKEN;\n\nexport { IP_LOCATION_TOKEN };\n","import styled from 'styled-components/macro';\n\nexport const Container = styled.div<{ readonly isNightTime?: boolean }>`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: ${(props) => (props.isNightTime ? 'black' : 'white')};\n\n  & > p {\n    color: ${(props) => (props.isNightTime ? 'white' : 'black')};\n  }\n\n  transition: background-color 2s ease-in;\n`;\n\nexport const Disclaimer = styled.p`\n  font-size: 12px;\n  opacity: 80%;\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  margin-bottom: 24px;\n`;\n","const getCurrentTime = () => {\n  const localDateTime = new Date();\n  const localTime = localDateTime.toString().split(' ')[4];\n  return localTime;\n};\n\nexport default getCurrentTime;\n","const getLocalSunsetTime = (utcTime: string) => {\n  const localDateTime = new Date(utcTime);\n  const localTime = localDateTime.toString().split(' ')[4];\n  return localTime;\n};\n\nexport default getLocalSunsetTime;\n","import Playpiem from './Playpiem';\n\nexport default Playpiem;\n","import { useEffect, useMemo, useState } from 'react';\nimport useGetSunriseAndSunset from '../api/useGetLocation';\nimport useGetLocationByIp from '../api/useGetSunriseAndSunset copy';\nimport { Container, Disclaimer } from './styles';\nimport getCurrentTime from './timeCalculations/getCurrentTime';\nimport getLocalSunsetTime from './timeCalculations/getLocalSunsetTime';\n\nconst ONE_MINUTE = 60000;\n\nconst Playpiem = () => {\n  const [lng, setLng] = useState<string | null>(null);\n  const [lat, setLat] = useState<string | null>(null);\n  const [time, setTime] = useState<string | null>(getCurrentTime);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTime(getCurrentTime);\n    }, ONE_MINUTE);\n    return () => clearInterval(interval);\n  }, []);\n\n  const { data, isLoading, isSuccess } = useGetLocationByIp();\n  const {\n    data: sunData,\n    isLoading: sunDataLoading,\n    isSuccess: sunDataSuccess,\n  } = useGetSunriseAndSunset(lat, lng);\n\n  const localSunsetTime = useMemo(() => {\n    if (sunData) {\n      const utcSunset = sunData.results.sunset;\n      const sunsetTime = getLocalSunsetTime(utcSunset);\n      return sunsetTime;\n    }\n  }, [sunData]);\n\n  useEffect(() => {\n    if (data) {\n      const { loc: location } = data;\n      const [userLat, userLng] = location.split(',');\n      setLat(userLat);\n      setLng(userLng);\n    }\n  }, [data]);\n\n  const isNightTime = useMemo(() => {\n    if (!time || !localSunsetTime) {\n      return false;\n    }\n    if (time > localSunsetTime) {\n      return true;\n    }\n    return false;\n  }, [time, localSunsetTime]);\n\n  if (isLoading || sunDataLoading) {\n    return (\n      <Container>\n        <p>Locating...</p>\n      </Container>\n    );\n  }\n\n  if (isSuccess && sunDataSuccess) {\n    return (\n      <Container isNightTime={isNightTime}>\n        <p>{data.city}</p>\n        <p>\n          The sun will set at {localSunsetTime}, come back then to see the\n          content\n        </p>\n        <Disclaimer>The location is determined by your ip address</Disclaimer>\n      </Container>\n    );\n  }\n\n  return null;\n};\n\nexport default Playpiem;\n","import { FC } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport Holding from './Playpiem';\n\nconst App: FC = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        refetchOnWindowFocus: false,\n        retry: 0,\n      },\n      mutations: {},\n    },\n  });\n  return (\n    <QueryClientProvider client={queryClient} contextSharing>\n      <Holding />\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root')!;\nconst root = createRoot(rootElement);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
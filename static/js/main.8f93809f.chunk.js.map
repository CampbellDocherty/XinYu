{"version":3,"sources":["api/useGetSunriseAndSunset.tsx","api/useFetchApi.tsx","Playpiem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SunriseApiStatus","useFetchApi","useCallback","endpoint","a","config","method","window","fetch","response","ok","json","text","errorMessage","Promise","reject","Error","useGetSunriseAndSunset","fetchApi","useQuery","enabled","Playpiem","useState","consented","setConsented","lng","setLng","lat","setLat","data","onClick","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","getLocation","results","sunset","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","retry","mutations","client","contextSharing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","createRoot","render"],"mappings":"qIAGKA,E,wDCiBUC,EAlBK,WAelB,OAdiBC,sBAAW,uCAAC,WAAOC,GAAP,mBAAAC,EAAA,6DACrBC,EAAS,CACbC,OAAQ,OAFiB,SAKJC,OAAOC,MAAP,UAAgBL,GAAYE,GALxB,YAKrBI,EALqB,QAMdC,GANc,yCAOlBD,EAASE,QAPS,wBASEF,EAASG,OATX,eASnBC,EATmB,yBAUlBC,QAAQC,OAAO,IAAIC,MAAMH,KAVP,4CAAD,sDAYzB,M,SDZAb,K,QAAAA,E,kCAAAA,E,4BAAAA,E,6BAAAA,M,KAkBL,IAaeiB,EAbgB,WAC7B,IAAMC,EAAWjB,IAEjB,OAAOkB,mBACL,0BACA,kBACED,EACE,kFAEJ,CAAEE,SAAS,K,OEcAC,EAzCE,WACf,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsBF,mBAAwB,MAA9C,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAAsBJ,mBAAwB,MAA9C,mBAAOK,EAAP,KAAYC,EAAZ,KAEQC,EAASZ,IAATY,KAuBR,OACE,qCACE,2DACA,wBAAQC,QARI,WACdN,GAAa,GAjBK,WAClB,IAAKO,UAAUC,YACb,OAAO,KAEPD,UAAUC,YAAYC,oBACpB,SAACC,GACCN,EAAOM,EAASC,OAAOC,UACvBV,EAAOQ,EAASC,OAAOE,cAEzB,WACE,OAAO,QAQbC,IAME,iBACA,wCACCf,GAAa,uCACbA,GAAa,gDAAYM,QAAZ,IAAYA,OAAZ,EAAYA,EAAMU,QAAQC,UACvCf,GAAO,4BAAIA,IACXE,GAAO,4BAAIA,QClBHc,EAjBC,WACd,IAAMC,EAAc,IAAIC,cAAY,CAClCC,eAAgB,CACdC,QAAS,CACPC,sBAAsB,EACtBC,MAAO,GAETC,UAAW,MAGf,OACE,cAAC,sBAAD,CAAqBC,OAAQP,EAAaQ,gBAAc,EAAxD,SACE,cAAC,EAAD,OCFSC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCHRQ,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GACnBI,OACH,cAAC,aAAD,UACE,cAAC,EAAD,OAOJb,M","file":"static/js/main.8f93809f.chunk.js","sourcesContent":["import { useQuery } from 'react-query';\nimport useFetchApi from './useFetchApi';\n\nenum SunriseApiStatus {\n  OK = 'OK',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  INVALID_DATE = 'INVALID_DATE',\n  UNKOWN_ERROR = 'UNKOWN_ERROR',\n}\n\ntype SunriseAndSunsetData = {\n  readonly sunrise: string;\n  readonly sunset: string;\n  readonly day_length: string;\n};\n\ntype SunriseAndSunsetResponse = {\n  readonly results: SunriseAndSunsetData;\n  readonly status: SunriseApiStatus;\n};\n\nconst useGetSunriseAndSunset = () => {\n  const fetchApi = useFetchApi();\n\n  return useQuery(\n    'GET_SUNRISE_AND_SUNSET',\n    (): Promise<SunriseAndSunsetResponse> =>\n      fetchApi(\n        'https://api.sunrise-sunset.org/json?lat=51.4790545&lng=-0.2820995&date=today'\n      ),\n    { enabled: true }\n  );\n};\n\nexport default useGetSunriseAndSunset;\n","import { useCallback } from 'react';\n\nconst useFetchApi = () => {\n  const fetchApi = useCallback(async (endpoint: string) => {\n    const config = {\n      method: 'GET',\n    };\n\n    const response = await window.fetch(`${endpoint}`, config);\n    if (response.ok) {\n      return response.json();\n    } else {\n      const errorMessage = await response.text();\n      return Promise.reject(new Error(errorMessage));\n    }\n  }, []);\n\n  return fetchApi;\n};\n\nexport default useFetchApi;\n","import { useState } from 'react';\nimport useGetSunriseAndSunset from './api/useGetSunriseAndSunset';\n\nconst Playpiem = () => {\n  const [consented, setConsented] = useState(false);\n  const [lng, setLng] = useState<number | null>(null);\n  const [lat, setLat] = useState<number | null>(null);\n\n  const { data } = useGetSunriseAndSunset();\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      return null;\n    } else {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setLat(position.coords.latitude);\n          setLng(position.coords.longitude);\n        },\n        () => {\n          return null;\n        }\n      );\n    }\n  };\n\n  const onClick = () => {\n    setConsented(true);\n    getLocation();\n  };\n\n  return (\n    <>\n      <h1>Can we get your location?</h1>\n      <button onClick={onClick}>Yes</button>\n      <button>No</button>\n      {consented && <p>London</p>}\n      {consented && <p>Sunset: {data?.results.sunset}</p>}\n      {lng && <p>{lng}</p>}\n      {lat && <p>{lat}</p>}\n    </>\n  );\n};\n\nexport default Playpiem;\n","import { FC } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport Playpiem from './Playpiem';\n\nconst App: FC = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        refetchOnWindowFocus: false,\n        retry: 0,\n      },\n      mutations: {},\n    },\n  });\n  return (\n    <QueryClientProvider client={queryClient} contextSharing>\n      <Playpiem />\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root')!;\nconst root = createRoot(rootElement);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
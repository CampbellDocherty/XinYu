{"version":3,"sources":["api/useGetSunriseAndSunset.tsx","api/useFetchApi.tsx","getLocation.tsx","styles.ts","Playpiem.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SunriseApiStatus","useFetchApi","useCallback","endpoint","config","method","window","fetch","response","ok","json","text","errorMessage","Promise","reject","Error","useGetSunriseAndSunset","lat","lng","fetchApi","locationAvailable","useQuery","enabled","LONDON_LAT","LONDON_LNG","LONDON_POSITION","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Container","styled","div","props","isNightTime","LocationConsentWrapper","ButtonWrapper","ConsentButton","button","Playpiem","useState","isLocating","setIsLocating","setLng","setLat","time","setTime","data","isLoading","localSunsetTime","useMemo","utcSunset","results","sunset","Date","toString","split","useEffect","currentTime","onClick","location","App","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","retry","mutations","client","contextSharing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.a903d191.chunk.js","sourcesContent":["import { useQuery } from 'react-query';\nimport useFetchApi from './useFetchApi';\n\nenum SunriseApiStatus {\n  OK = 'OK',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  INVALID_DATE = 'INVALID_DATE',\n  UNKOWN_ERROR = 'UNKOWN_ERROR',\n}\n\ntype SunriseAndSunsetData = {\n  readonly sunrise: string;\n  readonly sunset: string;\n  readonly day_length: string;\n};\n\ntype SunriseAndSunsetResponse = {\n  readonly results: SunriseAndSunsetData;\n  readonly status: SunriseApiStatus;\n};\n\nconst useGetSunriseAndSunset = (lat: number | null, lng: number | null) => {\n  const fetchApi = useFetchApi();\n\n  const locationAvailable = !!lat && !!lng;\n\n  return useQuery(\n    'GET_SUNRISE_AND_SUNSET',\n    (): Promise<SunriseAndSunsetResponse> =>\n      fetchApi(\n        `https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=today&formatted=0`\n      ),\n    { enabled: locationAvailable }\n  );\n};\n\nexport default useGetSunriseAndSunset;\n","import { useCallback } from 'react';\n\nconst useFetchApi = () => {\n  const fetchApi = useCallback(async (endpoint: string) => {\n    const config = {\n      method: 'GET',\n    };\n\n    const response = await window.fetch(`${endpoint}`, config);\n    if (response.ok) {\n      return response.json();\n    } else {\n      const errorMessage = await response.text();\n      return Promise.reject(new Error(errorMessage));\n    }\n  }, []);\n\n  return fetchApi;\n};\n\nexport default useFetchApi;\n","export const LONDON_LAT = 51.4790946;\nexport const LONDON_LNG = -0.2820046;\nconst LONDON_POSITION = {\n  lat: LONDON_LAT,\n  lng: LONDON_LNG,\n};\n\nconst getLocation = () => {\n  if (!navigator.geolocation) {\n    return LONDON_POSITION;\n  } else {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        return {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude,\n        };\n      },\n      () => {\n        return LONDON_POSITION;\n      }\n    );\n  }\n  return LONDON_POSITION;\n};\n\nexport default getLocation;\n","import styled from 'styled-components/macro';\n\nexport const Container = styled.div<{ readonly isNightTime: boolean }>`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: ${(props) => (props.isNightTime ? 'black' : 'white')};\n\n  & > p {\n    color: ${(props) => (props.isNightTime ? 'white' : 'black')};\n  }\n\n  transition: background-color 2s ease-in;\n`;\n\nexport const LocationConsentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ButtonWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-around;\n`;\n\nexport const ConsentButton = styled.button`\n  background-color: none;\n  width: 50px;\n  height: 25px;\n  background-color: none;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n","import { useEffect, useMemo, useState } from 'react';\nimport useGetSunriseAndSunset from './api/useGetSunriseAndSunset';\nimport getLocation, { LONDON_LAT, LONDON_LNG } from './getLocation';\nimport {\n  ButtonWrapper,\n  ConsentButton,\n  Container,\n  LocationConsentWrapper,\n} from './styles';\n\nconst getLocalSunsetTime = (utcTime: string) => {\n  const localDateTime = new Date(utcTime);\n  const localTime = localDateTime.toString().split(' ')[4];\n  return localTime;\n};\n\nconst getCurrentTime = () => {\n  const localDateTime = new Date();\n  const localTime = localDateTime.toString().split(' ')[4];\n  return localTime;\n};\n\nconst Playpiem = () => {\n  const [isLocating, setIsLocating] = useState(false);\n  const [lng, setLng] = useState<number | null>(null);\n  const [lat, setLat] = useState<number | null>(null);\n  const [time, setTime] = useState<string | null>(null);\n\n  const { data, isLoading } = useGetSunriseAndSunset(lat, lng);\n\n  const onClickYes = () => {\n    setIsLocating(true);\n    const location = getLocation();\n    setLat(location.lat);\n    setLng(location.lng);\n    setIsLocating(false);\n  };\n\n  const onClickNo = () => {\n    setLat(LONDON_LAT);\n    setLng(LONDON_LNG);\n  };\n\n  const localSunsetTime = useMemo(() => {\n    if (data) {\n      const utcSunset = data.results.sunset;\n      const sunsetTime = getLocalSunsetTime(utcSunset);\n      return sunsetTime;\n    }\n  }, [data]);\n\n  useEffect(() => {\n    const currentTime = getCurrentTime();\n    setTime(currentTime);\n  }, []);\n\n  const isNightTime = useMemo(() => {\n    if (!time || !localSunsetTime) {\n      return false;\n    }\n    if (time > localSunsetTime) {\n      return true;\n    }\n    return false;\n  }, [time, localSunsetTime]);\n\n  return (\n    <Container isNightTime={isNightTime}>\n      {!data && !isLoading && (\n        <LocationConsentWrapper>\n          <p>Can we get your location?</p>\n          <ButtonWrapper>\n            <ConsentButton onClick={onClickYes}>Yes</ConsentButton>\n            <ConsentButton onClick={onClickNo}>No</ConsentButton>\n          </ButtonWrapper>\n        </LocationConsentWrapper>\n      )}\n      {(isLocating || isLoading) && <p>Locating...</p>}\n      {localSunsetTime && <p>Sunset: {localSunsetTime}</p>}\n    </Container>\n  );\n};\n\nexport default Playpiem;\n","import { FC } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport Playpiem from './Playpiem';\n\nconst App: FC = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        refetchOnWindowFocus: false,\n        retry: 0,\n      },\n      mutations: {},\n    },\n  });\n  return (\n    <QueryClientProvider client={queryClient} contextSharing>\n      <Playpiem />\n    </QueryClientProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root')!;\nconst root = createRoot(rootElement);\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}